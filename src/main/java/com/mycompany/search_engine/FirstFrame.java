/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.search_engine;

import java.awt.List;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;
import javax.swing.JDialog;
import javax.swing.JFileChooser;

/**
 *
 * @author nesma
 */
public class FirstFrame extends javax.swing.JFrame {
    
    
    private File[] selectedFiles;
    ArrayList<String> ignoreList;
    BST bst = new BST();

    /**
     * Creates new form NewJFrame
     */
    public FirstFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btn_files = new javax.swing.JButton();
        btn_ignoreList = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(102, 102, 255));

        btn_files.setBackground(new java.awt.Color(204, 204, 204));
        btn_files.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_files.setText("Select Files");
        btn_files.setEnabled(false);
        btn_files.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_filesActionPerformed(evt);
            }
        });

        btn_ignoreList.setBackground(new java.awt.Color(204, 204, 204));
        btn_ignoreList.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btn_ignoreList.setText("Select Ignore List");
        btn_ignoreList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_ignoreListActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(108, 108, 108)
                .addComponent(btn_ignoreList, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(67, 67, 67)
                .addComponent(btn_files, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(123, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_ignoreList, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_files, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_filesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_filesActionPerformed
        // Dosya seçici (JFileChooser) oluşturulur.
        JFileChooser fileChooser = new JFileChooser();
        // Birden fazla dosya seçilebilmesini sağlamak için çoklu seçim etkinleştirilir.
        fileChooser.setMultiSelectionEnabled(true);

        // Dosya seçim penceresi gösterilir ve kullanıcının seçim yapması beklenir.
        int sonuc = fileChooser.showOpenDialog(this);

        // Kullanıcı dosya seçimini onayladıysa
        if (sonuc == JFileChooser.APPROVE_OPTION) {
            // Seçilen dosyalar alınır
            selectedFiles = fileChooser.getSelectedFiles();
            // Her bir seçilen dosya için işlem yapılır
            for (File dosya : selectedFiles) {
                // Seçilen dosyanın yolunu, BST'ye ve ignoreList'e eklemek için işlem yapılır
                processInputFile(dosya.getAbsolutePath(), bst, ignoreList);
            }
        }
        // Bu pencere kapatılır
        this.dispose();
        // İkinci bir pencere oluşturulur ve gösterilir
        SecondFrame newFrm = new SecondFrame(bst);
        newFrm.setVisible(true); // İkinci pencereyi görünür hale getirir
    }//GEN-LAST:event_btn_filesActionPerformed

    private void btn_ignoreListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_ignoreListActionPerformed
        // Ignore listesi seçici (JFileChooser) oluşturulur
        JFileChooser ignoreListChooser = new JFileChooser();
        // Dosya seçim penceresi gösterilir ve kullanıcının seçim yapması beklenir
        int sonuc = ignoreListChooser.showOpenDialog(this);

        // Kullanıcı dosya seçimini onayladıysa
        if (sonuc == JFileChooser.APPROVE_OPTION) {
            // Seçilen ignore listesi dosyası alınır
            File secilenListe = ignoreListChooser.getSelectedFile();
            // Seçilen ignore listesi dosyasının yolu kullanılarak ignoreList güncellenir
            ignoreList = readIgnoreList(secilenListe.getAbsolutePath());
        }

        // Dosya seçim işlemi tamamlandıktan sonra "Select Files" butonu etkinleştirilir
        btn_files.setEnabled(true);
    }//GEN-LAST:event_btn_ignoreListActionPerformed
    private static ArrayList<String> readIgnoreList(String filePath) {
        ArrayList<String> ignoreList = new ArrayList<>();
        // Dosya okunurken olası hataların yakalanması için try-catch bloğu kullanılır.
        try {
            // Dosya yolundan bir File nesnesi oluşturulur.
            File file = new File(filePath);
            BufferedReader reader = new BufferedReader(new FileReader(file));
            String line;
            // Dosya satır satır okunur ve her bir satır ignoreList'e eklenir.
            while ((line = reader.readLine()) != null) {
                ignoreList.add(line.trim());
            }
            // Dosya okuma işlemi tamamlandıktan sonra BufferedReader kapatılır.
            reader.close();
        } catch (IOException e) {
            // IOException oluşması durumunda hatanın yazdırılması sağlanır.
            e.printStackTrace();
        }
        return ignoreList;
    }

    // Verilen dosya yolundaki dosyayı işleyen ve içeriğindeki kelimeleri BST'ye ekleyen metot.
    private static void processInputFile(String filePath, BST bst, ArrayList<String> ignoreList) {
        traverseFiles(filePath, bst, ignoreList);
    }

    // Dosya gezme işlemini gerçekleştiren metot.
    private static void traverseFiles(String filePath, BST bst, ArrayList<String> ignoreList) {
        try {
            File dosya = new File(filePath);
            BufferedReader reader = new BufferedReader(new FileReader(dosya));
            String line;

            // Dosya satır satır okunur.
            while ((line = reader.readLine()) != null) {
                // Satırdan HTML etiketleri kaldırılır.
                String metin = removeHTMLTags(line);

                // Metindeki kelimeler StringTokenizer kullanılarak ayrıştırılır.
                StringTokenizer tokenizer = new StringTokenizer(metin);
                while (tokenizer.hasMoreTokens()) {
                    // Her bir kelime alınır, küçük harflere dönüştürülür ve gereksiz karakterlerden arındırılır.
                    String word = tokenizer.nextToken().toLowerCase().replaceAll("[^a-zA-Z]", "");
                    // Kelime boş değilse ve ignore listesinde bulunmuyorsa BST'ye eklenir.
                    if (!word.trim().isEmpty() && !ignoreList.contains(word)) {
                        bst.insert(word, filePath);
                    }
                }
            }

            reader.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private static String removeHTMLTags(String text) {
        String pattern = "<[^>]*>";
        return text.replaceAll(pattern, "");
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_files;
    private javax.swing.JButton btn_ignoreList;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
